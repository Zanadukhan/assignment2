#!/bin/bash



# default values to check whether a flag has been used

groupadd=""
userID=""
addinfo=""
homedir=""
shell=""


# checks if user is root or script is run with sudo
# learned from: https://serverfault.com/questions/37829/bash-scripting-require-script-to-be-run-as-root-or-with-sudo

if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "Not running as root"
    exit 1
fi

while getopts ":s:h:g:mi:" opt; do
  case ${opt} in
    s|shell) 

    # learned how to find list of available shells from:
    # https://unix.stackexchange.com/questions/140286/how-to-find-list-of-available-shells-by-command-line

    # tests if shell passed in is a valid shell by searching for it in /etc/shells with grep"

    is_Shell=$(grep -w $OPTARG "/etc/shells")

    if [[ -z $is_Shell ]]; then
      echo "Invalid shell, use 'cat /etc/shells' to check available shells and try again"
      exit 1
    fi
      
    # Allows the user to specify which shell they want to use
    shell=/bin/${OPTARG}
    
    ;;
    h|home)

    # Learned that "=~" does regex matching between two var from:
    # https://unix.stackexchange.com/questions/340440/bash-test-what-does-do

    # checks if option is a valid absolute file path, exits if not
    if [[ ! $OPTARG =~ ^/ ]]; then
      echo ${OPTARG} is not a valid absolute file path, try again
      exit 1
    fi

    # Allows user to specify location of home directory
    homedir=${OPTARG}
      
    ;;
    i|id)

    # checks if the ID the user wants to use has already been assigned and exits if it has
    usedID=$(grep -o $OPTARG /etc/passwd | head -n 1)
    if [[ -n $usedID ]]; then
      echo ${OPTARG} is an UID that has been assigned to another user, pick another one or let the script automatically assign free UID
      exit 1
    fi

    # if the user wants to use a specific ID
    userID=${OPTARG}

    ;;
    g|group)
      # Allows user to add new user to a group
      # converting a string into an array: https://stackoverflow.com/questions/9293887/how-to-read-a-space-delimited-string-into-an-array-in-bash
      read -a group_list <<< ${OPTARG}
      groupadd=${group_list[@]}
    ;;

    # script manual for the user
    m|man)
      cat <<- EOF
	Usage: 
  
  usercreation [options] <username>

  Description: 
  
  This script allows users to create a new user along with a home directory
  and whatever groups they would like to add the user to.

	Options:

	-m, --man 

	This option displays the manual for this script

	-s, --shell <name of shell>

  default: bash

	This allows the user to specify a specific shell for the new user rather tha  n the default shell for users, Bash

	-h, --home <absolute/path/to/dir>

  default: /home/<username>

	If the user provides an argument, a custom home directory will be created an  d set for the new user

	-g, --group <group1 group2 group3...>

  default: <username>

	the user can be added to additional group along with the initial default group

EOF
      exit 0	
      # tells the user what this script does
    ;;
    *)
      cat << EOF
      Invalid arguments, for more information, run this command with
      -m or -man
EOF
      exit 1
    ;;
      # learned how to handle multiline strings from: https://stackoverflow.com/questions/10969953/how-to-output-a-multiline-string-in-bash
    esac
done



#OPTINT used to allow manipulation of non-option arguments
shift $(( $OPTIND - 1 ))


# setting default values


# looping to find the next empty userID if custom ID is not provided
if [[ -z $userID ]]; then
    for num in {1000..100000}; do
        usedIDarr=$(grep -o $num /etc/passwd | head -n 1)
        # checking if the current num is in the passwd file, if grep returns nothing, it should be used as a new UID
        if [[ -z $usedIDarr ]]; then
            userID=$num
            break
        fi
    done
fi

if [[ -z $homedir ]]; then
    homedir="/home/$1"
fi

if [[ -z $shell ]]; then
    shell="/bin/bash"
fi

#Entry for /etc/passwd from variables
user_entry="$1:x:$userID:$userID:$addinfo:$homedir:$shell"

#Entry for default group for /etc/group
defgroup_entry="$1:x:$userID:"

# creating home directory if it doesn't exist
if [[ ! -d $homedir ]]; then
    mkdir $homedir
    # copy contents of /etc/skel to new home dir
      # learned how to copy all contents of a folder to another one from:
      # https://askubuntu.com/questions/86822/how-can-i-copy-the-contents-of-a-folder-to-another-folder-in-a-different-directo
    cp -a /etc/skel/. $homedir 
fi

# adding user to /etc/passwd

echo $user_entry >> "/etc/passwd"

# adding default group to /etc/group

echo $defgroup_entry >> "/etc/group"

# changing ownership for home dir to new user

chown "$1": "$homedir"

# This code loops through the groups provided and looks inside the /etc/group file to see if it already exists, if it does, it will append the user to the end so it becomes a member of the group
if [[ -n $groupadd ]]; then
    for group in ${groupadd[@]}; do
        found=$(grep $group /etc/group | head -n 1)
        if [[ -n $found ]]; then
        # group was found
          add_group=${found}$1
          # learned how to use sed from
          # https://www.geeksforgeeks.org/sed-command-in-linux-unix-with-examples/
          sed -i "s/$found/$add_group/" /etc/group
          break
        elif [[ -z $found ]]; then
        # group does not exist
            echo Group does not exist
        fi
        done
fi


# Once new user has been created, prompt the script user to add a password
echo "Give new user $1 a new password"
echo




# if the user is unable to retype the new password, prompt the user to try again until the user is able to do it

while true; do
  passwd "$1"
  if [[ ! $? -eq 0 ]]; then
  echo Try again
  else
  break
  fi
done

# Summary of results
cat << EOF

Your new user has been successfully created -

Username: $1
Password: x
Groups: $1 ${groupadd[@]}
UID: $userID
GID: $userID
Shell: $shell
Home Directory: $homedir
EOF


