#!/bin/bash

groupadd=""
userID=""
addinfo=""
homedir=""
shell=""





# checks if user is root or script is run with sudo
# learned from: https://serverfault.com/questions/37829/bash-scripting-require-script-to-be-run-as-root-or-with-sudo

if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "Not running as root"
    exit 1
fi

while getopts ":s:h:g:m:i:" opt; do
  case ${opt} in
    s|shell) 
      # Allows the user to specify which shell they want to use
      shell=/bin/${OPTARG}
    ;;
    h|home)

      # Allows user to specify location of home directory
      homedir=${OPTARG}
      
    ;;
    i|id)
    # if the user wants to use a specific ID
    userID=${OPTARG}

    ;;
    g|group)
      # Allows user to add new user to a group
      # converting a string into an array: https://stackoverflow.com/questions/9293887/how-to-read-a-space-delimited-string-into-an-array-in-bash
      read -a group_list <<< ${OPTARG}
      groupadd=${group_list[@]}
    ;;

    # script manual for the user
    m|man)
      cat <<- EOF
	Usage: 
  
  usercreation [options] <username>

  Description: 
  
  This script allows users to create a new user along with a home directory
  and whatever groups they would like to add the user to.

	Options:

	-m, --man 

	This option displays the manual for this script

	-s, --shell <path/to/shell>

  default: /bin/bash

	This allows the user to specify a specific shell for the new user rather tha  n the default shell for users, Bash

	-h, --home <path/to/dir>

  default: /home/<username>

	If the user provides an argument, a custom home directory will be created an  d set for the new user

	-g, --group <group1 group2 group3...>

  default: <username>

	additional groups can be specified and the new users will be assigned to tho  ise groups

EOF
      exit 0	
      # tells the user what this script does
    ;;
    *)
      cat << EOF
      Invalid arguments, for more information, run this command with
      -m or -man
EOF
      exit 1
    ;;
      # learned how to handle multiline strings from: https://stackoverflow.com/questions/10969953/how-to-output-a-multiline-string-in-bash
    esac
done



#OPTINT used to allow manipulation of non-option arguments
shift $(( $OPTIND - 1 ))


# setting default values


# looping to find the next empty userID if custom ID is not provided
if [[ -z $userID ]]; then
    for num in {1000..100000}; do
        usedIDarr=$(grep -o $num /etc/passwd | head -n 1)
        # checking if the current num is in the passwd file, if grep returns nothing, it should be used as a new UID
        if [[ -z $usedIDarr ]]; then
            userID=$num
            break
        fi
    done

fi

#looping to find the next empty groupID

if [[ -z $homedir ]]; then
    homedir="/home/$1"
fi

if [[ -z $shell ]]; then
    shell="/bin/bash"
fi

#Entry for /etc/passwd from variables
user_entry="$1:x:$userID:$userID:$addinfo:$homedir:$shell"

#Entry for default group for /etc/group
defgroup_entry="$1:x:$userID:$1"

# creating home directory if it doesn't exist
if [[ ! -d $homedir ]]; then
    mkdir $homedir
    # copy contents of /etc/skel to new home dir
      # learned how to copy all contents of a folder to another one from:
      # https://askubuntu.com/questions/86822/how-can-i-copy-the-contents-of-a-folder-to-another-folder-in-a-different-directo
    cp -a /etc/skel/. $homedir 
fi

# adding user to /etc/passwd

echo $user_entry >> "/etc/passwd"

# adding default group to /etc/group

echo $defgroup_entry >> "/etc/group"

# changing ownership for home dir to new user

chown "$1": "$homedir"

# creating custom groups if argument was passed
if [[ -n $groupadd ]]; then
    for group in ${groupadd[@]}; do
        for num in {1000..100000}; do
        usedgroupIDarr=$(grep -o $num /etc/group | head -n 1)
        if [[ -z $usedgroupIDarr ]]; then
            group_entry="$group:x:$num:$1"
            echo $group_entry >> /etc/group
            break
        fi
        done
    done
fi

# Once new user has been created, prompt the script user to add a password
echo "Give new user $1 a new password"
echo

# TODO: check if passwd succeeded, if not, cancel and do not try to create user
passwd "$1"

cat << EOF

Your new user has been successfully created -

Username: $1
Password:
Groups: $1 ${groupadd[@]}
UID: $userID
GID: $userID
Shell: $shell
Home Directory: $homedir
EOF


